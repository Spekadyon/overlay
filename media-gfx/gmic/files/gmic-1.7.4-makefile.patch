diff --git a/src/Makefile b/src/Makefile
index 8720236..5eb0311 100644
--- a/src/Makefile
+++ b/src/Makefile
@@ -59,7 +59,6 @@ INCLUDE = include
 SO = .so
 PIC = -fPIC
 EXE =
-WGET = wget --no-check-certificate --quiet -O
 PLUGINDIR = `gimptool-2.0 --gimpplugindir`/plug-ins
 
 ifeq ($(OS),Linux)
@@ -99,7 +98,6 @@ USR = /usr/local
 else
 USR = /opt/local
 endif
-WGET = curl -k -L --silent -o
 endif
 
 ifeq ($(OS),Windows)
@@ -127,7 +125,6 @@ MANDATORY_LIBS = `pkg-config --libs zlib || echo -lz`
 ifndef NO_SRIPDLIB
 MANDATORY_CFLAGS += -std=c++11
 endif
-MANDATORY_LIBS += -L$(USR)/$(LIB)
 ifeq ($(notdir $(CXX)),g++)
 MANDATORY_CFLAGS += -Wall -Wextra
 MANDATORY_LIBS += -lm
@@ -144,6 +141,9 @@ ifeq ($(OS),Windows)
 MANDATORY_LIBS += -Wl,--stack,16777216
 endif
 
+# Support for external CImg.h
+MANDATORY_CFLAGS += -I.
+
 # Flags to enable software debugging (slow down the code!).
 DEBUG_CFLAGS = -ansi -pedantic -Dcimg_verbosity=3 -g -fsanitize=address # -fsanitize=thread # -fsanitize=undefined #
 
@@ -174,8 +174,13 @@ endif
 ABORT_CFLAGS = -Dcimg_use_abort
 
 # Flags to enable parallelization of image processing algorithms, using OpenMP.
+ifndef NOOPENMP
 OPENMP_CFLAGS = -fopenmp -Dcimg_use_openmp
 OPENMP_LIBS = -lgomp
+else
+OPENMP_CFLAGS =
+OPENMP_LIBS =
+endif
 
 # Flags to enable image display, using X11
 # (keep /usr/ dirname here since X11 is located in /usr/ on Mac too).
@@ -380,7 +385,7 @@ GMICOL_LIBS = $(MANDATORY_LIBS) $(PARALLEL_LIBS) $(PNG_LIBS) $(JPEG_LIBS) $(ZLIB
 #--------------------------
 
 # Main default entries.
-all: CImg.h gmic_stdlib.h
+all: gmic_stdlib.h
 ifeq ($(OS),Unix)
 	@echo "**"
 	@echo "** Start building G'MIC with default Unix configuration."
@@ -437,7 +442,7 @@ static:
 staticlibc:
 	$(MAKE) "CFLAGS+=$(GMIC_STATIC_LIBC_CFLAGS) $(OPT_CFLAGS)" "LIBS+=$(GMIC_STATIC_LIBC_LIBS)" libcgmicstatic
 
-zart: CImg.h gmic_stdlib.h
+zart: gmic_stdlib.h
 	@if [ ! -d ../zart ]; then ln -fs ../gmic-community/zart ..; fi
 ifeq ($(OS),Darwin)
 	cd ../zart && qmake zart.pro && $(MAKE) && $(STRIP) zart.app/Contents/MacOS/zart
@@ -447,10 +452,11 @@ endif
 
 # Internal rules to build compilation modules.
 
-libgmic.o: gmic.cpp gmic.h gmic_stdlib.h CImg.h
+libgmic.o: gmic.cpp gmic.h gmic_stdlib.h
 	$(CXX) -o libgmic.o -c gmic.cpp $(PIC) $(CFLAGS)
+
 libgmic: libgmic.o use_libgmic.cpp
-	ar rcs libgmic.a libgmic.o
+	$(AR) rcs libgmic.a libgmic.o
 ifeq ($(OS),Darwin)
 	$(CXX) -shared -o libgmic.so libgmic.o $(LIBS)
 else
@@ -458,14 +464,14 @@ else
 	$(CXX) -o use_libgmic use_libgmic.cpp -L. -lgmic $(LIBS)
 endif
 
-libcgmic.o: gmic.cpp gmic.h gmic_stdlib.h CImg.h
+libcgmic.o: gmic.cpp gmic.h gmic_stdlib.h
 	@if [ ! -f gmic_libc.cpp ]; then ln -fs ../../gmic-community/libcgmic/gmic_libc.cpp .; fi
 	@if [ ! -f gmic_libc.h ]; then ln -fs ../../gmic-community/libcgmic/gmic_libc.h .; fi
 	$(CXX) -o libcgmic.o -c gmic_libc.cpp $(PIC) $(CFLAGS)
 
 libcgmic: libgmic.o libcgmic.o
 ifeq ($(OS),Darwin)
-	ar rcs libcgmic.a libcgmic.o
+	$(AR) rcs libcgmic.a libcgmic.o
 	$(CXX) -shared -o libcgmic.so libcgmic.o libgmic.o $(LIBS)
 else
 ifeq ($(OS),Windows)
@@ -477,12 +483,12 @@ endif
 	@if [ ! -f use_libcgmic.c ]; then ln -fs ../../gmic-community/libcgmic/use_libcgmic.c .; fi
 	$(CC) -std=c99 -o use_libcgmic use_libcgmic.c -L. -lcgmic
 
-libcgmicstatic.o: gmic.cpp gmic.h gmic_stdlib.h CImg.h
+libcgmicstatic.o: gmic.cpp gmic.h gmic_stdlib.h
 	$(CXX) -o libcgmicstatic.o -c gmic_libc.cpp $(PIC) $(CFLAGS)
 
 libcgmicstatic: libcgmicstatic.o libgmic.o
 ifeq ($(OS),Darwin)
-	ar rcs libcgmicstatic.a libcgmicstatic.o
+	$(AR) rcs libcgmicstatic.a libcgmicstatic.o
 	$(CXX) -shared -static -o libcgmicstatic.so libcgmicstatic.o libgmic.o $(PIC) $(CFLAGS) $(LIBS)
 else
 ifeq ($(OS),Windows)
@@ -493,7 +499,7 @@ endif
 endif
 	$(CC) -std=c99 -o use_libcgmic_static use_libcgmic.c -L. -lcgmicstatic
 
-gmic_gimp.o: gmic.cpp gmic.h gmic_stdlib.h CImg.h
+gmic_gimp.o: gmic.cpp gmic.h gmic_stdlib.h
 	$(CXX) -o gmic_gimp.o -c gmic.cpp -Dgmic_gimp $(CFLAGS)
 
 gmic_gimp: gmic_gimp.o gmic_gimp.cpp
@@ -508,18 +514,9 @@ else
 endif
 	$(STRIP) gmic_gimp$(EXE)
 
-gmic: gmic.cpp gmic.h gmic_stdlib.h CImg.h
+gmic: gmic.cpp gmic.h gmic_stdlib.h
 	$(CXX) -o gmic gmic.cpp -Dgmic_main $(CFLAGS) $(LIBS)
 
-gmic_stdlib.h:
-	@echo -n "> Retrieve G'MIC Standard Library..."
-	@$(WGET) gmic_stdlib.h http://gmic.eu/gmic_stdlib.h
-	@touch gmic_stdlib.h
-	@echo " done!"
-CImg.h:
-	@echo -n "> Retrieve CImg Library..."
-	@if [ -f ../../CImg/CImg.h ]; then if [ ! -f ./CImg.h ]; then ln -s ../../CImg/CImg.h .; fi; else $(WGET) CImg.h https://github.com/dtschump/CImg/blob/master/CImg.h?raw=true; touch CImg.h; fi
-	@echo " done!"
 
 # Generate gmic_stdlib.h file (requires 'gmic' to be installed first).
 stdlib:
@@ -569,37 +566,39 @@ stdlib:
 #\n\
 */\n" > gmic_stdlib.h
 	@echo "#ifndef gmic_gimp" >> gmic_stdlib.h
-	@\gmic gmic_stdlib.gmic raw:gmic_stdlib.gmic,char -compress_gmic_cli 1 -a y -serialize char,1,0 -o -.h,uchar | sed 's/unsigned char/const unsigned char/' | sed 's/unnamed/gmic_stdlib/' >> gmic_stdlib.h
+	@./gmic gmic_stdlib.gmic raw:gmic_stdlib.gmic,char -compress_gmic_cli 1 -a y -serialize char,1,0 -o -.h,uchar | sed 's/unsigned char/const unsigned char/' | sed 's/unnamed/gmic_stdlib/' >> gmic_stdlib.h
 	@echo "#else" >> gmic_stdlib.h
-	@\gmic gmic_stdlib.gmic raw:gmic_stdlib.gmic,char -compress_gmic_gimp 1 -a y -serialize char,1,0 -o -.h,uchar | sed 's/unsigned char/const unsigned char/' | sed 's/unnamed/gmic_stdlib/' >> gmic_stdlib.h
-	@\gmic -v - ../html/img/logoGMIC.ppm -permute cxyz -serialize uchar,1,0 -o -.h,uchar | sed 's/unsigned char/const unsigned char/' | sed 's/unnamed/gmic_logo/' >> gmic_stdlib.h
+	@./gmic gmic_stdlib.gmic raw:gmic_stdlib.gmic,char -compress_gmic_gimp 1 -a y -serialize char,1,0 -o -.h,uchar | sed 's/unsigned char/const unsigned char/' | sed 's/unnamed/gmic_stdlib/' >> gmic_stdlib.h
+	@./gmic -v - ../html/img/logoGMIC.ppm -permute cxyz -serialize uchar,1,0 -o -.h,uchar | sed 's/unsigned char/const unsigned char/' | sed 's/unnamed/gmic_logo/' >> gmic_stdlib.h
 	@echo "const unsigned long size_data_gmic_logo = (unsigned long)sizeof(data_gmic_logo);" >> gmic_stdlib.h
 	@echo "#endif" >> gmic_stdlib.h
 	@echo "const unsigned long size_data_gmic_stdlib = (unsigned long)sizeof(data_gmic_stdlib);" >> gmic_stdlib.h
 	@echo >>gmic_stdlib.h
-	@\gmic -v - -_update_server_upload gmic_stdlib.h
+	@./gmic -v - -_update_server_upload gmic_stdlib.h
 
 # Generate bash completion script (requires 'gmic' to be installed first).
 bashcompletion:
 	@mkdir -p ../resources
-	@\gmic -v - gmic_stdlib.gmic raw:gmic_stdlib.gmic,uchar -document_gmic bash 2> ../resources/gmic_bashcompletion.sh
+	@./gmic -v - gmic_stdlib.gmic raw:gmic_stdlib.gmic,uchar -document_gmic bash 2> ../resources/gmic_bashcompletion.sh
 
 # Generate man page (requires 'gmic' to be installed).
 man:
 	@mkdir -p ../man
-	@\gmic -v - gmic_stdlib.gmic raw:gmic_stdlib.gmic,uchar -__help man 2> ../man/gmic.1
-	@gzip -f ../man/gmic.1
+	@./gmic -v - gmic_stdlib.gmic raw:gmic_stdlib.gmic,uchar -__help man 2> ../man/gmic.1
 
 # Install/uninstall/clean procedures.
-install:
+install-gimp:
 	mkdir -p $(DESTDIR)$(PLUGINDIR)/
 	cp -f gmic_gimp $(DESTDIR)$(PLUGINDIR)/
 	cp -f ../resources/gmic_film_cluts.gmz $(DESTDIR)$(PLUGINDIR)/
+
+install-bin:
 	mkdir -p $(DESTDIR)$(USR)/$(BIN)/
 	cp -f gmic $(DESTDIR)$(USR)/$(BIN)/
+
+install-lib:
 	mkdir -p $(DESTDIR)$(USR)/$(INCLUDE)/
 	cp -f gmic.h $(DESTDIR)$(USR)/$(INCLUDE)/
-	cp -f gmic_libc.h $(DESTDIR)$(USR)/$(INCLUDE)/
 
 ifneq ($(OS),Darwin)
 	mkdir -p $(DESTDIR)$(USR)/share
@@ -607,18 +606,29 @@ ifneq ($(OS),Darwin)
 	cp -f libgmic.so $(DESTDIR)$(USR)/$(LIB)/libgmic.so.1.7.4
 	ln -fs libgmic.so.1.7.4 $(DESTDIR)$(USR)/$(LIB)/libgmic.so.1
 	ln -fs libgmic.so.1 $(DESTDIR)$(USR)/$(LIB)/libgmic.so
+endif
+
+install-libc:
+	mkdir -p $(DESTDIR)$(USR)/$(INCLUDE)/
+	cp -f gmic_libc.h $(DESTDIR)$(USR)/$(INCLUDE)/
+ifneq ($(OS),Darwin)
+	mkdir -p $(DESTDIR)$(USR)/share
+	mkdir -p $(DESTDIR)$(USR)/$(LIB)
 	cp -f libcgmic.so $(DESTDIR)$(USR)/$(LIB)/libcgmic.so.1.7.4
 	ln -fs libcgmic.so.1.7.4 $(DESTDIR)$(USR)/$(LIB)/libcgmic.so.1
 	ln -fs libcgmic.so.1 $(DESTDIR)$(USR)/$(LIB)/libcgmic.so
-	cp -f ../zart/zart $(DESTDIR)$(USR)/$(BIN)/
 endif
+
+install-zart:
+	cp -f ../zart/zart $(DESTDIR)$(USR)/$(BIN)/
+
+install-man:
 	mkdir -p $(DESTDIR)$(USR)/share/man/
 	mkdir -p $(DESTDIR)$(USR)/share/man/man1/
-	mkdir -p $(DESTDIR)$(USR)/share/man/fr/man1/
-	cp -f ../man/gmic.1.gz $(DESTDIR)$(USR)/share/man/man1/gmic.1.gz
-	cp -f ../man/gmic.1.gz $(DESTDIR)$(USR)/share/man/fr/man1/gmic.1.gz
+	cp -f ../man/gmic.1 $(DESTDIR)/$(USR)/share/man/man1/gmic.1
+
+install-bash:
 	if [ -d /etc/bash_completion.d/ ]; then mkdir -p $(DESTDIR)/etc/bash_completion.d/; cp -f ../resources/gmic_bashcompletion.sh $(DESTDIR)/etc/bash_completion.d/gmic; fi
-	if [ -d /opt/local/etc/bash_completion.d/ ]; then mkdir -p $(DESTDIR)/opt/local/etc/bash_completion.d/; cp -f ../resources/gmic_bashcompletion.sh $(DESTDIR)/opt/local/etc/bash_completion.d/gmic; fi
 
 uninstall:
 	rm -f $(DESTDIR)$(USR)/$(BIN)/gmic
